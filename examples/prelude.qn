'tagReturn = newTag ()
'returner = argumentify 'args { unopaque (args@0) tagReturn }
'def = argumentify 'argsAndBlock {
	# TODO: check argsAndBlock len
	'args = (argsAndBlock@0)
	'block = (argsAndBlock@1)

	argumentify 'callArgs {
		'i = mut 0
		'out = mut []
		'ret = loop {
			'ii = load i
			if (ii >= (len callArgs)) {
				(opaque
					(insertAndCall (load out) block)
					tagReturn
					[tagReturner returner]
				)
			} {
				out <- append (load out) [(args@ii) (callArgs@ii)]
				i <- (ii + 1)
			}
		}
		default { (attr ret tagReturner) ret } { ret }
	}
}
(atom "->") = def

'returnStringer = def ['_] { "return" }
'returnReturner = def ['ret] { unopaque ret tagReturn }
'return = argumentify 'args {
	'x = (args @ 0)
	(opaque
		x
		tagReturn
		[tagStringer returnStringer]
		[tagReturner returnReturner]
	)
}

(atom "&&") = def ['x 'y] {
	if x {
		if (y ()) {
			true
		} {
			false
		}
	} {
		false
	}
}

(atom "||") = def ['x 'y] {
	if x {
		true
	} {
		if (y ()) {
			true
		} {
			false
		}
	}
}

# TODO: use varargs
'pipe = def ['x 'line] {
	'v = mut x
	'i = mut 0
	loop {
		'ii = (load i)
		if (ii >= (len line)) {
			return (load v)
		}
		i <- (ii + 1)
		v <- (line @ ii) (load v)
	}
}

'tagStop = newTag ()
'stopEq = (['_ 'v] -> { default { opaqueTagEq v tagStop } { false } })
'stopStringer = (['_] -> { "stop" })
'stop = opaque () tagStop [tagEq stopEq] [tagStringer stopStringer]

'lit = (['list] -> {
	{
		'i = mut 0
		{
			'cur = load i
			if (cur >= (len list)) {
				stop
			} {
				i <- (cur + 1)
				list@cur
			}
		}
	}
})

'filter = (['cond] -> {
	['iter] -> {
		{
			'next = iter ()
			{
				loop {
					'v = next ()
					if (v == stop) {
						return stop
					}
					if (cond v) {
						return v
					}
				}
			}
		}
	}
})

'toList = def ['iter] {
	'out = mut []
	'next = iter ()
	loop {
		'v = next ()
		if (v == stop) {
			return (load out)
		}
		out <- (append (load out) v)
	}
}

# TODO: check start <= end
(atom "..") = def ['start 'end] {
	{
		'i = mut start
		{
			'cur = load i
			if (cur >= end) {
				stop
			} {
				i <- (cur + 1)
				cur
			}
		}
	}
}

# TODO: check (len matcherAndBlocks) %% 2 == 0
'match = def ['x 'matcherAndBlocks] {
	'mb = matcherAndBlocks
	'i = mut 0
	loop {
		'ii = load i
		if (ii >= (len mb)) {
			return ()
		}
		i <- (ii + 2)

		'matcher = (mb @ ii)
		'block = (mb @ (ii + 1))
		'res = (attr matcher tagMatcher) matcher x
		'ok = (res @ 0)
		'matches = (res @ 1)
		if ok {
			return (insertAndCall matches block)
		}
	}
}
