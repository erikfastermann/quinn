'tagReturn = newTag ()
'returner = argumentify { [['ret (__args@0)]] } { unopaque ret tagReturn } { __return }
# TODO: check __args len
'defBefore = { [['args (__args@0)] ['block (__args@1)]] }
'defBlock = {
	(argumentify
		{
			'i = mut 0
			'out = mut []
			loop {
				'ii = load i
				if (ii >= (len __args)) {
					(opaque
						(load out)
						tagReturn
						[tagReturner returner]
					)
				} {
					out <- append (load out) [(args@ii) (__args@ii)]
					i <- (ii + 1)
				}
			}
		}
		block
		{ __return }
	)
}
'def = (argumentify
	defBefore
	defBlock
	{ default { (attr __return tagReturner) __return } { __return } }
)
(atom "->") = def

'returnStringer = def ['_] { "return" }
'returnReturner = def ['ret] { unopaque ret tagReturn }
'return = def ['x] {
	(opaque
		x
		tagReturn
		[tagStringer returnStringer]
		[tagReturner returnReturner]
	)
}

(atom "&&") = def ['x 'y] {
	if x {
		if (y ()) {
			true
		} {
			false
		}
	} {
		false
	}
}

(atom "||") = def ['x 'y] {
	if x {
		true
	} {
		if (y ()) {
			true
		} {
			false
		}
	}
}

(atom "|") = def ['a 'b] {
	'args = append_list [a] (slice b 1 (len b))
	call (b @ 0) args
}


'tagStop = newTag ()
'stopEq = (['_ 'v] -> { default { opaqueTagEq v tagStop } { false } })
'stopStringer = (['_] -> { "stop" })
'stop = opaque () tagStop [tagEq stopEq] [tagStringer stopStringer]

'lit = (['list] -> {
	{
		'i = mut 0
		{
			'cur = load i
			if (cur >= (len list)) {
				stop
			} {
				i <- (cur + 1)
				list@cur
			}
		}
	}
})

'filter = (['iter 'cond] -> {
	{
		'next = iter ()
		{
			loop {
				'v = next ()
				if (v == stop) {
					return stop
				}
				if (cond v) {
					return v
				}
			}
		}
	}
})

'toList = (['iter] -> {
	'out = mut []
	'next = iter ()
	loop {
		'v = next ()
		if (v == stop) {
			return (load out)
		}
		out <- (append (load out) v)
	}
})

# TODO: check start <= end
(atom "..") = def ['start 'end] {
	{
		'i = mut start
		{
			'cur = load i
			if (cur >= end) {
				stop
			} {
				i <- (cur + 1)
				cur
			}
		}
	}
}

# TODO: check (len matcherAndBlocks) %% 2 == 0
'match = def ['x 'matcherAndBlocks] {
	'mb = matcherAndBlocks
	'i = mut 0
	loop {
		'ii = load i
		if (ii >= (len mb)) {
			return ()
		}
		i <- (ii + 2)

		'matcher = (mb @ ii)
		'block = (mb @ (ii + 1))
		'res = (attr matcher tagMatcher) matcher x
		'ok = (res @ 0)
		'matches = (res @ 1)
		if ok {
			return ((argumentify { matches } block { __return }) ())
		}
	}
}
