tagStop = newTag ()
stopEq = ([x y] -> { (opaqueTag x) == (default {opaqueTag y} ()) })
stopStringer = ([_] -> { "stop" })
stop = opaque () tagStop [tagEq stopEq] [tagStringer stopStringer]

defop "&&" x y {
	if x {
		y ()
	} {
		false
	}
}

each = ([name list fn] -> {
	i = mut 0
	out = loop {
		cur = load i
		if (cur >= (len list)) {
			stop
		} {
			i <- (cur + 1)
			([name] -> fn) (list@cur)
		}
	}
	if (out != stop) {
		out
	}
})

match = ([x exprs] -> {
	i = mut 0
	each case exprs {
		prev = load i
		i <- (prev + 1)
		if (((prev %% 2) == 0) && {(case @ 0) x}) {
			if ((len case) == 1) {
				((exprs @ (prev+1)) ())
			} {
				([(case@1)] -> (exprs @ (prev+1))) x
			}
		}
	}
})

some = ([x] -> {
	if x { true } { false }
})

none = ([x] -> {
	if x { false } { true }
})

println (match 1 [
	[some x] { x + 41 }
	[none] { 456 }
])
